name: Install and check package
description: installing and validationg the package

inputs:
  artifact-name:
    description: "Unique name for collecting artifacts"
    required: false
    default: ""
  import-name:
    description: "Import name to test with after installation"
    required: true
  pkg-extras:
    description: "optional extras which are needed to include also []"
    required: false
    default: ""
  pip-flags:
    description: "additional pip install flags"
    required: false
    default: "-f https://download.pytorch.org/whl/cpu/torch_stable.html"

runs:
  using: "composite"
  steps:
    - name: Download ðŸ“¥ all packages
      if: ${{ inputs.artifact-name != '' }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.artifact-name }}
        path: pypi
    - name: show packages
      working-directory: pypi/
      run: |
        ls -lh
        echo "PKG_WHEEL=$(ls *.whl | head -n1)" >> $GITHUB_ENV
        echo "PKG_SOURCE=$(ls *.tar.gz | head -n1)" >> $GITHUB_ENV
      shell: bash

    - name: Install package (wheel) & check
      working-directory: pypi/
      # TODO: reset env / consider add as conda
      run: |
        set -ex
        pip install "${{ env.PKG_WHEEL }}${{ inputs.pkg-extras }}" ${{ inputs.pip-flags }}
        pip list
        python -c "import ${{ inputs.import-name }} as pkg; print(f'version: {pkg.__version__}')"
      shell: bash

    - name: Uninstall all
      run: |
        pip freeze > _reqs.txt
        pip uninstall -y -r _reqs.txt
      shell: bash

    - name: Install package (archive) & check
      working-directory: pypi/
      # TODO: reset env / consider add as conda
      run: |
        set -ex
        pip install "${{ env.PKG_SOURCE }}${{ inputs.pkg-extras }}" ${{ inputs.pip-flags }}
        pip list
        python -c "import ${{ inputs.import-name }} as pkg; print(f'version: {pkg.__version__}')"
      shell: bash
