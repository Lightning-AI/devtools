name: Check package flow

on:
  workflow_call:
    inputs:
      artifact-name:
        description: 'Unique name for collecting artifacts'
        required: true
        type: string
      import-name:
        description: 'Import name to test with after installation'
        required: true
        type: string
      install-flags:
        description: 'Additional pip install flags'
        required: false
        type: string
        default: ""
      build-matrix:
        description: 'what building configs in json format'
        required: false
        type: string
        default: |
          {
            "os": ["ubuntu-latest"],
          }
      testing-matrix:
        description: 'what test configs to run in json format'
        required: false
        type: string
        # default operating systems should be pinned to specific versions instead of "-latest" for stability
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        default: |
          {
            "os": ["ubuntu-20.04", "macos-11", "windows-2022"],
            "python-version": ["3.7", "3.9"]
          }

defaults:
  run:
    shell: bash

jobs:

  init-store:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout 🛎️
      uses: actions/checkout@v3
    - run: |
        mkdir dist && touch dist/.placeholder
    - name: Upload 📤
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact-name }}
        path: dist

  pkg-build:
    needs: init-store
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 1  # run sequential to prevent download/upload collisions
      fail-fast: false
      matrix: ${{ fromJSON(inputs.build-matrix) }}

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      - name: Download 📥 previous packages
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: pypi
      - name: Set up Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Check local package
        run: python setup.py check --metadata --strict

      - name: Create package
        run: |
          pip install -q -U setuptools wheel
          python setup.py sdist bdist_wheel
          python setup.py clean

      - name: Check build package
        run: |
          pip install -q -U twine>=4.0.1
          # check package description
          twine check dist/*

      - name: prepare for upload
        run: cp dist/* pypi/
      - name: Upload 📤 to the share store
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: pypi

  pkg-check:
    needs: pkg-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.testing-matrix) }}

    steps:
      - name: Download 📥 all packages
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: pypi
      - name: show packages
        working-directory: pypi
        run: ls -lh
      - name: Set up Python 🐍 ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package (wheel)
        working-directory: pypi
        run: |
          # TODO: reset env / conside add as conda
          pip install *.whl ${{ inputs.install-flags }}
          python -c "import ${{ inputs.import-name }} as pkg; print(f'version: {pkg.__version__}')"
          pip list

      - name: Uninstall all
        run: |
          pip freeze > _reqs.txt
          pip uninstall -y -r _reqs.txt

      - name: Install package (archive)
        working-directory: pypi
        run: |
          # TODO: reset env / conside add as conda
          pip install *.tar.gz ${{ inputs.install-flags }}
          python -c "import ${{ inputs.import-name }} as pkg; print(f'version: {pkg.__version__}')"
          pip list

      # TODO: add run doctests
