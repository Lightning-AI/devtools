name: Test

on:
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]

jobs:
  pytest:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        python-version: [3.8]
        requires: ['oldest', 'latest']

    timeout-minutes: 35

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        brew install libomp  # https://github.com/pytorch/pytorch/issues/20030

    - name: Set oldest dependencies
      if: matrix.requires == 'oldest'
      run: |
        for fpath in ('requirements.txt', 'tests/requirements.txt'):
            req = open(fpath).read().replace('>=', '==')
            open(fpath, 'w').write(req)
      shell: python

    - name: Get pip cache
      id: pip-cache
      run: |
        python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}-pip-

    - name: Install dependencies
      run: |
        pip install -e . -U --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
        pip install -q -r tests/requirements.txt
        python --version
        pip --version
        pip list
      shell: bash

    - name: Tests
      run: |
        coverage run --source src/pl_devtools -m pytest src/pl_devtools tests -v --junitxml=junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
      if: failure()

    - name: Statistics
      if: success()
      run: |
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false
