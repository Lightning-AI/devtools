name: UnitTests

on:
  push:
    branches: [main, "release/*"]
  pull_request:
    branches: [main, "release/*"]

defaults:
  run:
    shell: bash

jobs:

  pytester:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        python-version: ["3.7", "3.10"]
        requires: ['oldest', 'latest']
    timeout-minutes: 35
    steps:
    - name: Checkout üõé
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Python üêç ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set oldest dependencies
      # todo: this is strange to use itself :/
      if: matrix.requires == 'oldest'
      run: |
        pip install -e '.[cli]'
        python -m lightning_utilities.cli requirements set-oldest

    - name: Complex üíΩ caching
      uses: ./.github/actions/cache
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip install -e . -U -r requirements/dev-tests.txt \
          -f https://download.pytorch.org/whl/cpu/torch_stable.html
        pip --version
        pip list

    - name: Print üñ®Ô∏è dependencies
      uses: ./.github/actions/pip-list

    - name: Unittesting and coverage
      uses: ./.github/actions/unittesting
      with:
        python-version: ${{ matrix.python-version }}
        pytorch-version: ${{ matrix.pytorch-version }}
        pkg-name: "lightning_utilities"
        pytest-args: "--timeout=120"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false


  testing-guardian:
    runs-on: ubuntu-latest
    needs: pytester
    if: always()
    steps:
    - run: echo "${{ needs.pytester.result }}"
    - name: failing...
      if: needs.pytester.result == 'failure'
      run: exit 1
    - name: cancelled or skipped...
      if: contains(fromJSON('["cancelled", "skipped"]'), needs.pytester.result)
      timeout-minutes: 1
      run: sleep 90
